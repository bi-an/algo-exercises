1、二叉搜索树：
左子节点总是<=根节点<=右子节点，或者空树。
又名：二叉查找树，二叉排序树。
时间复杂度：可以在logn的时间根据数值找到某个节点。

2、堆：
条件1：堆中某个节点的值总是不大于或不小于其父节点的值；
条件2：堆总是一棵完全二叉树。（编号与满二叉树一一对应的树叫完全二叉树。）
最大堆：根节点最大、完全二叉树。
最小堆：根节点最小、完全二叉树。
快速找到最大值和最小值，常通过堆实现。

3、平衡二叉树：
左右子树的高度差的绝对值不超过1，并且两个子树都是平衡二叉树。或者空树。
又名：平衡二叉搜索树，AVL-树
最小平衡二叉树的节点总数：F(n)=F(n-1)+F(n-2)+1，1是根节点，F(n-1)是左子树节点数，F(n-2)是右子树节点数。

4、红黑树：
把节点分为红、黑色，并通过规则保证从根节点到叶节点的最长路径<=最短路径的2倍。
又名：自平衡二叉搜索树、对称二叉B树、AVL-树（AVL是两个发明者名字）。
时间复杂度：可以在logn时间内查找、插入、删除（n为节点数）。在最坏情况下运行时间依然良好。

5、AVL-树：
