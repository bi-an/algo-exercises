//2的幂次，转化成二进制思考，就是某一个位是1，其他位置都是零。
//比如第x位是1，其他位都是零，那么，此数就是2的（x-1）次幂，
//此数可以通过 第x-1位到第1位都设置为1，然后再加1得到。
//为了防止本身就是2的整数次幂，先进行一个减1的操作，然后再把最高位以及右边的位都设置为1，再加1。
//将最高位以及右边的位都设置为1，使用位或和右移动。
//最坏的情况：num--之后，除了最高位，其他都是0；右移1位后按位或，那么结果有两个1(最高位和次高位)；
//再右移两位后按位或，结果则有四个1；
//再右移四位后按位或，结果则有八个1；依次类推。
inline size_t getNextPow2(size_t num) {
	size_t bit_cnt = sizeof(num) * 8;
	int i = 1;
	num--; //防止num本身是2整数次方
	while (i < bit_cnt) {
		num |= num >> i;
		i *= 2;
	}
	num++;
	return num;
}